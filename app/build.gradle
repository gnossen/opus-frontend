apply plugin: 'com.android.application'

def getVersionString = { ->
    if(rootProject.hasProperty('versionNumber')) {
        return rootProject.ext.versionNumber
    } else {
        return '0.0.0'
    }
}

def getGitRevision = "git rev-parse --short HEAD".execute().text.trim()

android {

    lintOptions {
        abortOnError false
    }

    useLibrary 'org.apache.http.legacy'

    applicationVariants.all { variant ->

        // rename apks with version number and git revision
        variant.outputs.each { output ->
            output.outputFile = new File(
                output.outputFile.parent,
                output.outputFile.name.replace(".apk", "-${getVersionString()}-${getGitRevision}.apk").
                    replace("app", "${rootProject.projectName}"))
        }

        // delete intermediate unaligned apk
        variant.assemble.doLast {
           variant.outputs.each { output ->
                File aligned = output.outputFile;
                File unaligned = output.packageApplication.outputFile;

                if(!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                    unaligned.delete()
                }
            }
        }
    }

    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        applicationId "org.opus.beacon"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "${getVersionString()}-${getGitRevision}"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/DEPENDENCIES'

    }
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.0.0'
    compile 'org.springframework.android:spring-android-rest-template:2.0.0.M1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
    testCompile 'org.robolectric:robolectric:3.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'
    compile files('libs/httpclient-4.5.1.jar')
    compile files('libs/httpcore-4.4.3.jar')
    compile files('libs/httpmime-4.5.1.jar')
    compile files('libs/mail.jar')
}

repositories {
    maven {
        url 'http://repo.spring.io/milestone'
    }
}


